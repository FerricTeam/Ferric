name: Ferric Build CI

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

env:
  RUST_INSTALL_LOCATION_LINUX: /home/runner/Steam/steamapps/common/rust_dedicated
  RUST_INSTALL_LOCATION_WINDOWS: C:\hostedtoolcache\windows\steamcmd\latest\i386\steamapps\common\rust_dedicated

jobs:
  build-linux:
    runs-on: ubuntu-latest
    # Prevent double running for push & pull_request events from the main repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'FerricTeam/Ferric'
    steps:
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      - name: Setup SteamCMD
        # You may pin to the exact commit or the version.
        # uses: CyberAndrii/setup-steamcmd@1a23c36fdf39218db07a406b1fda2775eb0636c3
        uses: CyberAndrii/setup-steamcmd@v1.1.4

      - uses: actions/checkout@v2.3.4
      
      #- name: Download xbuild
      #  shell: bash
      #  run: |
      #    sudo apt-get install nuget mono-devel mono-xbuild
      - name: Update nuget
        shell: bash
        run: |
          nuget update -self
      - name: Download APublicizer
        uses: carlosperate/download-file-action@v1.1.1
        with:
          file-url: 'https://github.com/iRebbok/APublicizer/releases/latest/download/native-linux-x64-release.tar.gz'
          file-name: 'release.tar.gz'
      - name: Get latest buildid
        shell: bash
        run: |
          echo "buildid=$(curl "https://api.steamcmd.net/v1/info/258550" | tac | tac | jq '.data."258550".depots.branches.public.buildid' | sed 's/"//g')" >> $GITHUB_ENV
      - name: Cache Rust Dedicated Server
        id: cache-rust
        uses: actions/cache@v3.0.11
        env:
          cache-name: cache-rust-linux
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ${{ env.RUST_INSTALL_LOCATION_LINUX }}/RustDedicated_Data/Managed/
          # An explicit key for restoring and saving the cache
          key: "${{ env.buildid }}-linux"
      - if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
        name: Download Rust Dedicated Server
        shell: bash
        run: |
          steamcmd +login anonymous +app_update 258550 validate +quit
      - name: Extract APublicizer
        shell: bash
        run: |
          tar -xzvf release.tar.gz
      - name: Publicize Assemblies
        shell: bash
        run: |
          ./APublicizer ${{ env.RUST_INSTALL_LOCATION_LINUX }}/RustDedicated_Data/Managed/Assembly-CSharp.dll
          ./APublicizer ${{ env.RUST_INSTALL_LOCATION_LINUX }}/RustDedicated_Data/Managed/Facepunch.Console.dll
      - name: Restore Packages
        run: nuget restore Ferric.sln
      - name: Build
        id: build
        env:
          FERRIC_REFS: ${{ env.RUST_INSTALL_LOCATION_LINUX }}/RustDedicated_Data/Managed
        shell: bash
        run: |
          xbuild Ferric.sln /p:Configuration="Release" /p:Platform="Any CPU"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Build Results Linux
          path: |
            Ferric/bin/Release
            Ferric.Example/bin/Release
            Ferric.Injection/bin/Release
            Ferric.Patcher/bin/Release
  build-win:
    runs-on: windows-latest
    # Prevent double running for push & pull_request events from the main repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'FerricTeam/Ferric'
    steps:
      #- name: Download 7zr
      #  uses: carlosperate/download-file-action@v1.1.1
      #  with:
      #    file-url: 'https://www.7-zip.org/a/7zr.exe'
      #    file-name: '7zr.exe'
      #- name: Download 7zip extras
      #  uses: carlosperate/download-file-action@v1.1.1
      #  with:
      #    file-url: 'https://www.7-zip.org/a/7z2201-extra.7z'
      #    file-name: '7zextra.7z'
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1.3
        with:
          # Folder location of where vswhere.exe is located if a self-hosted agent
          # vswhere-path: # optional
          # Version of Visual Studio to search; defaults to latest if not specified
          # vs-version: # optional
          # Enable searching for pre-release versions of Visual Studio/MSBuild
          vs-prerelease: false # optional
          # The preferred processor architecture of MSBuild. Can be either "x86" or "x64". "x64" is only available from Visual Studio version 17.0 and later.
          msbuild-architecture: x64
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
      - name: Setup SteamCMD
        # You may pin to the exact commit or the version.
        # uses: CyberAndrii/setup-steamcmd@1a23c36fdf39218db07a406b1fda2775eb0636c3
        uses: CyberAndrii/setup-steamcmd@v1.1.4

      - uses: actions/checkout@v2.3.4
      
      #- name: Extract 7za
      #  shell: pwsh
      #  run: |
      #    .\7zr.exe e -i!x64/7za.exe 7zextra.7z
      - name: Download APublicizer
        uses: carlosperate/download-file-action@v1.1.1
        with:
          file-url: 'https://github.com/iRebbok/APublicizer/releases/latest/download/native-win-x64-release.tar.gz'
          file-name: 'release.tar.gz'
      - name: Get latest buildid
        shell: pwsh
        run: |
          echo "buildid=$(((Invoke-WebRequest -Uri 'https://api.steamcmd.net/v1/info/258550' -UseBasicParsing).Content | ConvertFrom-Json).data."258550".depots.branches.public.buildid)" >> $env:GITHUB_ENV
      - name: Cache Rust Dedicated Server
        id: cache-rust
        uses: actions/cache@v3.0.11
        env:
          cache-name: cache-rust-windows
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed\
          # An explicit key for restoring and saving the cache
          key: "${{ env.buildid }}-windows"
      - if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
        name: Download Rust Dedicated Server
        shell: pwsh
        run: |
          steamcmd +login anonymous +app_update 258550 validate +quit
      - name: Extract APublicizer
        shell: pwsh
        run: |
          tar -xzvf release.tar.gz
      - name: Publicize Assemblies
        shell: pwsh
        run: |
          .\APublicizer ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed\Assembly-CSharp.dll
          .\APublicizer ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed\Facepunch.Console.dll
      - name: Restore Packages
        run: nuget restore Ferric.sln
      - name: Build
        env:
          FERRIC_REFS: ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed
        shell: pwsh
        run: |
          msbuild.exe Ferric.sln /p:Configuration="Release" /p:Platform="Any CPU"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Build Results Windows
          path: |
            Ferric/bin/Release
            Ferric.Example/bin/Release
            Ferric.Injection/bin/Release
            Ferric.Patcher/bin/Release
  patch-rust:
    runs-on: windows-latest
    needs: [build-linux, build-win]
    # Prevent double running for push & pull_request events from the main repo
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'FerricTeam/Ferric'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: Build Results Windows
          path: C:\artefacts
      # TODO: remove
      - name: debug
        shell: pwsh
        run: |
          C:\artefacts; dir /S
      - name: Extract artefacts
        shell: pwsh
        run: |
          Expand-Archive -LiteralPath 'Build Results Windows.zip' -DestinationPath 'C:\artefacts'
      - name: Get latest buildid
        shell: pwsh
        run: |
          echo "buildid=$(((Invoke-WebRequest -Uri 'https://api.steamcmd.net/v1/info/258550' -UseBasicParsing).Content | ConvertFrom-Json).data."258550".depots.branches.public.buildid)" >> $env:GITHUB_ENV
      - name: Cache Rust Dedicated Server
        id: cache-rust
        uses: actions/cache@v3.0.11
        env:
          cache-name: cache-rust-windows
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed\
          # An explicit key for restoring and saving the cache
          key: "${{ env.buildid }}-windows"
      - if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
        name: Setup SteamCMD
        # You may pin to the exact commit or the version.
        # uses: CyberAndrii/setup-steamcmd@1a23c36fdf39218db07a406b1fda2775eb0636c3
        uses: CyberAndrii/setup-steamcmd@v1.1.4
      - if: ${{ steps.cache-rust.outputs.cache-hit != 'true' }}
        name: Download Rust Dedicated Server
        shell: pwsh
        run: |
          steamcmd +login anonymous +app_update 258550 validate +quit
      - name: Copy Assembly-CSharp.dll and Ferric.Injection.dll
        shell: pwsh
        run: |
          copy ${{ env.RUST_INSTALL_LOCATION_WINDOWS }}\RustDedicated_Data\Managed\Assembly-CSharp.dll C:\artefacts\Ferric.Patcher\bin\Release\
            copy C:\artefacts\Ferric.Injection\bin\Release\Ferric.Injection.dll artefacts\Ferric.Patcher\bin\Release\
      - name: Run Patcher
        shell: pwsh
        run: |
          cd artefacts\Ferric.Patcher\bin\Release; .\Ferric.Patcher.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Build Results Windows
          path: |
            C:\artefacts\Ferric.Patcher\bin\Release\Assembly-CSharp-Ferric.dll